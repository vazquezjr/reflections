1) When would you want to use a remote repository rather than keeping all your work
local?

When you would want to share your work with others as well as working with others
    on the same project.
    
2) Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

The commits may have changes that are not fully operational, thus resulting in a branch
    that have many non-logical commits.

3) Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

A fork is used to make a copy of a repository while giving credit to the owner of the original
    repository. A clone is used to make a copy of a repository of GitHub on your local machine.
    A branch is used when you want to make other experimental changes before deciding that it
    should be a part of the application or before the feature is operational. A fork is useful
    to be able to push to a repo while also giving credit to the original owner(s). A clone
    is useful if you are a contributer to a repo that you are cloning. A branch is
    useful for testing and developing new features that want to be added.

4) What is the benefit of having a copy of the last known state of the remote
stored locally?

You can continue to make changes to your repo without having to worry about changes being made to the main repo. To push the changes
    to GitHub you can then perform git pull to update your local remote and, afterwards, git push to push the changes into
    the GitHub repo.

5) How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

My group and I would have to get together and work on the projects as well as strictly agreeing on any conventions or
    any design structures that we decide to use. Without using Git or GitHub, we would not need to learn anything new
    regarding Git and GitHub. However, working collaboratively would be much tougher since it would harder to track a
    large amount of changes between myself and anyone in any group that we work in.
    
6) When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

Making changes in a separate branch can be beneficial when working with others in developing a feature that can then be
    shared with the rest of the collaborators once the feature is finished or is updated by using a pull request. Working
    on master can be beneficial as well, for adding and changing main features that are crucial part of the application
    being worked on.
